amcl:
  ros__parameters:
    alpha1: 0.2  # Rotational noise due to rotational motion (yaw error).
    alpha2: 0.2  # Rotational noise due to translational motion (slippage/skid).
    alpha3: 0.2  # Translational noise due to rotational motion (turning while moving).
    alpha4: 0.2  # Translational noise due to translational motion (straight-line movement).
    alpha5: 0.2  # Noise related to velocity commands (affects motion model).
    base_frame_id: "base_footprint"  # Frame ID representing the robot's base.
    beam_skip_distance: 0.5  # Distance threshold (in meters) for skipping laser beams with inconsistent readings.
    beam_skip_error_threshold: 0.9  # Maximum allowable fraction of beams with errors before skipping is applied.
    beam_skip_threshold: 0.3  # Fraction of beams that must be consistent to avoid skipping.
    do_beamskip: false  # Enables beam skipping for computational optimization when false.
    global_frame_id: "map"  # Frame ID used for the global coordinate system.
    lambda_short: 0.1  # Exponential decay rate for the short range noise model (used in laser likelihood calculations).
    laser_likelihood_max_dist: 2.0  # Maximum distance (in meters) to consider for likelihood field computation in laser scans.
    laser_max_range: 100.0  # Maximum range of the laser sensor (in meters); ignores readings beyond this value.
    laser_min_range: -1.0  # Minimum range of the laser sensor (in meters); ignores readings below this value. Default (-1) means no minimum.
    laser_model_type: "likelihood_field"  # Model type for laser scan processing (e.g., "beam", "likelihood_field").
    max_beams: 60  # Maximum number of beams from the laser scan used for particle filter updates.
    max_particles: 2000  # Maximum number of particles allowed in the particle filter.
    min_particles: 500  # Minimum number of particles allowed in the particle filter.
    odom_frame_id: "odom"  # Frame ID for odometry data; represents the robot's pose based on odometry.
    pf_err: 0.05  # Maximum error tolerance for the particle filter's convergence.
    pf_z: 0.99  # Minimum confidence level required to resample particles.
    recovery_alpha_fast: 0.0  # Fast weight recovery parameter for particles; adjusts to rapid changes in the environment.
    recovery_alpha_slow: 0.0  # Slow weight recovery parameter for particles; adjusts to gradual changes in the environment.
    resample_interval: 1  # Number of updates before resampling particles.
    robot_model_type: "nav2_amcl::DifferentialMotionModel"  # Robot motion model type (e.g., differential drive).
    save_pose_rate: 0.5  # Rate (in seconds) at which the estimated robot pose is saved.
    sigma_hit: 0.2  # Standard deviation for the Gaussian model of the sensor's hit probability.
    tf_broadcast: true  # Whether to publish the transform from `map` to `odom` frame.
    transform_tolerance: 100.0  # Tolerance (in seconds) for transforms to be considered valid.
    update_min_a: 0.2  # Minimum angular movement (in radians) required to trigger an update.
    update_min_d: 0.25  # Minimum translational movement (in meters) required to trigger an update.
    z_hit: 0.5  # Weight for the sensor's hit model (accurate matches between laser scan and map).
    z_max: 0.05  # Weight for the max range noise model (beams beyond max range).
    z_rand: 0.5  # Weight for random measurements in the sensor model.
    z_short: 0.05  # Weight for the short range noise model (unexpectedly short measurements).
    scan_topic: scan  # Name of the topic providing laser scan data.


bt_navigator:
  ros__parameters:
    global_frame: map  # The global reference frame for navigation, typically "map".
    robot_base_frame: base_link  # The frame attached to the robot's base, often "base_link".
    odom_topic: /odom  # Topic name for odometry data used by the navigation stack.
    bt_loop_duration: 10  # Time (in milliseconds) between successive iterations of the behavior tree execution loop.
    default_server_timeout: 20  # Default timeout (in seconds) for service requests made to behavior tree nodes.
    wait_for_service_timeout: 1000  # Maximum time (in milliseconds) to wait for a service to become available.
    action_server_result_timeout: 900.0  # Time (in seconds) to wait for an action server to provide a result.
    navigators:  # List of behavior tree navigators to load and execute.
      - "navigate_to_pose"  # Navigator used for navigating to a single pose goal.
      - "navigate_through_poses"  # Navigator used for navigating through multiple pose goals in sequence.
    navigate_to_pose:  # Configuration for the "navigate_to_pose" behavior tree navigator.
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"  # Plugin implementing the "navigate to pose" behavior tree.
    navigate_through_poses:  # Configuration for the "navigate_through_poses" behavior tree navigator.
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"  # Plugin implementing the "navigate through poses" behavior tree.

    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' parameters:
    # These parameters define the default behavior tree XML files used for navigation.
    # By default, the following XML files are used for replanning and recovery:
    # - nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # - nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # You can set these here or via a RewrittenYaml remap in a parent launch file.

    # plugin_lib_names:
    # A list of plugin library names (vector of strings) to add custom behavior tree (BT) plugins to the executor.
    # Built-in plugins are automatically included, so this is optional unless you're using custom BT nodes.
    # plugin_lib_names: []

    error_code_names:  # Names of error codes used for debugging and recovery during navigation.
      - compute_path_error_code  # Error code for path computation failures.
      - follow_path_error_code  # Error code for path following failures.

controller_server:
  ros__parameters:
    controller_frequency: 5.0  # Frequency (Hz) at which the controller runs.
    costmap_update_timeout: 0.30  # Maximum time (seconds) to wait for the costmap update before stopping.
    min_x_velocity_threshold: 0.001  # Minimum threshold for the robot's x-axis velocity.
    min_y_velocity_threshold: 0.5  # Minimum threshold for the robot's y-axis velocity.
    min_theta_velocity_threshold: 0.001  # Minimum threshold for the robot's angular (theta) velocity.
    failure_tolerance: 0.3  # Time (seconds) allowed for the robot to fail before recovery is triggered.
    progress_checker_plugins: ["progress_checker"]  # List of plugins to monitor navigation progress.
    goal_checker_plugins: ["general_goal_checker"]  # List of plugins to verify goal conditions.
    controller_plugins: ["FollowPath"]  # List of controller plugins to execute paths.
    use_realtime_priority: false  # If true, assigns real-time priority to the controller.

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"  # Plugin used to check if progress is being made.
      required_movement_radius: 0.5  # Minimum distance (meters) the robot must move within the timeout.
      movement_time_allowance: 10.0  # Maximum time (seconds) allowed without significant movement.

    # Goal checker parameters
    # precise_goal_checker:
    #   plugin: "nav2_controller::SimpleGoalChecker"
    #   xy_goal_tolerance: 0.25  # Distance tolerance (meters) to consider the goal reached.
    #   yaw_goal_tolerance: 0.25  # Angular tolerance (radians) to consider the goal reached.
    #   stateful: True  # If true, keeps state between checks.

    general_goal_checker:
      stateful: True  # If true, keeps state between checks.
      plugin: "nav2_controller::SimpleGoalChecker"  # Plugin used to check if the goal has been reached.
      xy_goal_tolerance: 0.25  # Distance tolerance (meters) to consider the goal reached.
      yaw_goal_tolerance: 0.25  # Angular tolerance (radians) to consider the goal reached.

    # FollowPath plugin parameters
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"  # Plugin for the controller to follow paths.
      time_steps: 56  # Number of time steps to model trajectories.
      model_dt: 0.20  # Time (seconds) per time step in the trajectory model.
      batch_size: 2000  # Number of samples generated in each iteration.
      ax_max: 3.0  # Maximum linear acceleration (m/s^2) in the x-direction.
      ax_min: -3.0  # Minimum linear acceleration (m/s^2) in the x-direction.
      ay_max: 3.0  # Maximum linear acceleration (m/s^2) in the y-direction.
      az_max: 3.5  # Maximum angular acceleration (radians/s^2).
      vx_std: 0.25  # Standard deviation for velocity in x-direction.
      vy_std: 0.2  # Standard deviation for velocity in y-direction.
      wz_std: 0.4  # Standard deviation for angular velocity (z-axis).
      vx_max: 0.5  # Maximum linear velocity (m/s) in x-direction.
      vx_min: -0.35  # Minimum linear velocity (m/s) in x-direction.
      vy_max: 0.5  # Maximum linear velocity (m/s) in y-direction.
      wz_max: 1.9  # Maximum angular velocity (radians/s).
      iteration_count: 1  # Number of iterations for optimization.
      prune_distance: 1.7  # Distance (meters) to prune the global plan.
      transform_tolerance: 100.0  # Tolerance (ms) for TF transforms.
      temperature: 0.3  # Temperature parameter for MPPI optimization.
      gamma: 0.015  # Discount factor for cost calculations.
      motion_model: "DiffDrive"  # Motion model used for trajectory generation.
      visualize: true  # If true, enables trajectory visualization in RViz.
      regenerate_noises: true  # If true, regenerates noise samples during trajectory optimization.

      TrajectoryVisualizer:
        trajectory_step: 5  # Step interval for trajectory visualization.
        time_step: 3  # Time interval (seconds) for visualization steps.

      AckermannConstraints:
        min_turning_r: 0.2  # Minimum turning radius (meters) for Ackermann steering.

      # List of critics used to evaluate trajectories
      critics: [
        "ConstraintCritic", "CostCritic", "GoalCritic",
        "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic",
        "PathAngleCritic", "PreferForwardCritic"
      ]

      # ConstraintCritic parameters
      ConstraintCritic:
        enabled: true  # If true, enables this critic.
        cost_power: 1  # Power applied to the cost function.
        cost_weight: 4.0  # Weight for the critic in trajectory scoring.

      # GoalCritic parameters
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.4  # Threshold distance (meters) to consider the goal.

      # GoalAngleCritic parameters
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.5  # Threshold angle (radians) to consider alignment.

      # PreferForwardCritic parameters
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.5

      # CostCritic parameters
      CostCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.81
        critical_cost: 300.0  # Cost value considered critical for a trajectory.
        consider_footprint: true  # If true, considers the robot's footprint in cost calculations.
        collision_cost: 1000000.0  # Cost for trajectories that lead to collisions.
        near_goal_distance: 1.0  # Distance to consider for near-goal scoring.
        trajectory_point_step: 2  # Step interval for trajectory points.

      # PathAlignCritic parameters
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 4
        threshold_to_consider: 0.5
        offset_from_furthest: 20
        use_path_orientations: false

      # PathFollowCritic parameters
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 1.4

      # PathAngleCritic parameters
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.5
        max_angle_to_furthest: 1.0
        mode: 0  # Mode of operation for this critic.

      # Uncomment and configure if needed
      # TwirlingCritic:
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      robot_radius: 0.22
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.70
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      robot_radius: 0.22
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.7
      always_send_full_costmap: True

# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
# map_server:
#   ros__parameters:
#     yaml_filename: ""

map_saver:
  ros__parameters:
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 1.0
    planner_plugins: ["GridBased"]
    costmap_update_timeout: 1.0
    GridBased:
      plugin: "nav2_navfn_planner::NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 100.0
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 10.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 2.0]
    min_velocity: [-0.5, 0.0, -2.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

collision_monitor:
  ros__parameters:
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    state_topic: "collision_monitor_state"
    transform_tolerance: 100.0
    source_timeout: 1.0
    base_shift_correction: True
    stop_pub_timeout: 2.0
    # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
    # and robot footprint for "approach" action type.
    polygons: ["FootprintApproach"]
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint_topic: "/local_costmap/published_footprint"
      time_before_collision: 1.2
      simulation_time_step: 0.1
      min_points: 6
      visualize: False
      enabled: True
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "scan"
      min_height: 0.15
      max_height: 2.0
      enabled: True

docking_server:
  ros__parameters:
    controller_frequency: 10.0
    initial_perception_timeout: 5.0
    wait_charge_timeout: 5.0
    dock_approach_timeout: 30.0
    undock_linear_tolerance: 0.05
    undock_angular_tolerance: 0.1
    max_retries: 3
    base_frame: "base_link"
    fixed_frame: "odom"
    dock_backwards: false
    dock_prestaging_tolerance: 0.5

    # Types of docks
    dock_plugins: ['simple_charging_dock']
    simple_charging_dock:
      plugin: 'opennav_docking::SimpleChargingDock'
      docking_threshold: 0.05
      staging_x_offset: -0.7
      use_external_detection_pose: true
      use_battery_status: false # true
      use_stall_detection: false # true

      external_detection_timeout: 1.0
      external_detection_translation_x: -0.18
      external_detection_translation_y: 0.0
      external_detection_rotation_roll: -1.57
      external_detection_rotation_pitch: -1.57
      external_detection_rotation_yaw: 0.0
      filter_coef: 0.1

    # Dock instances
    # The following example illustrates configuring dock instances.
    # docks: ['home_dock']  # Input your docks here
    # home_dock:
    #   type: 'simple_charging_dock'
    #   frame: map
    #   pose: [0.0, 0.0, 0.0]

    controller:
      k_phi: 3.0
      k_delta: 2.0
      v_linear_min: 0.15
      v_linear_max: 0.15
      use_collision_detection: true
      costmap_topic: "/local_costmap/costmap_raw"
      footprint_topic: "/local_costmap/published_footprint"
      transform_tolerance: 100.0
      projection_time: 5.0
      simulation_step: 0.1
      dock_collision_threshold: 0.3

loopback_simulator:
  ros__parameters:
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    map_frame_id: "map"
    scan_frame_id: "base_scan"  # tb4_loopback_simulator.launch.py remaps to 'rplidar_link'
    update_duration: 0.02


